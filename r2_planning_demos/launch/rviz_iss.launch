<launch>

  <arg name="execute" default="true"/> <!-- set true when sending trajectories to a controller (Gazebo or real robot) -->
  <arg name="gazebo" default="false"/>  <!-- set true if using Gazebo -->
  <arg name="fake_robot" default="false"/>  <!-- set true if you are simulating a robot (e.g., not using Gazebo or an actual robot) -->
  <arg name="debug" default="false"/> <!-- set true to launch move_group in gdb -->
  <arg name="db" default="false"/> <!-- set true to start the moveit warehouse -->

  <!-- Load universal robotic description format (URDF) -->
  <param name="robot_description" textfile="$(find r2_description)/urdf/r2c6.urdf"/>

  <!-- Load a simplified URDF for legs ONLY (for faster inverse kinematics) -->
  <param name="legs/simplified_robot_description" command="$(find xacro)/xacro.py '$(find r2_simplified_urdf)/r2c6_legs_only_creepy.xacro'" />

  <!-- Load OMPL settings -->
  <include file="$(find r2_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="false"/>
  </include>

  <!-- This will create a node that broadcasts the transform for the virtual joint -->
  <!-- EDIT: Do not do this.  Does not allow us to move the robot in the planning scene (hence the word static).  Must manage this TF ourselves -->
  <!--<node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 virtual_world world 20" />-->

  <!-- Add custom constraint samplers.  This must be namespaced to move_group.  Should probably add to move_group launch file -->
  <param name="/move_group/constraint_samplers" value="moveit_r2_constraints/MoveItR2ConstraintSamplerAllocator moveit_r2_constraints/MoveItR2PoseSamplerAllocator"/>

  <!-- Disable trajectory duration monitoring in MoveIt.  The times we send are totally wrong -->
  <rosparam if="$(arg execute)" param="/move_group/trajectory_execution/execution_duration_monitoring">false</rosparam>

  <!-- Starting up move group server -->
  <include file="$(find r2_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="$(arg execute)"/>
    <arg name="publish_monitored_planning_scene" value="true"/>
    <arg name="pipeline" value="ompl_luna"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Start up the moveit warehouse db -->
  <include if="$(arg db)" file="$(find r2_moveit_config)/launch/default_warehouse_db.launch" />


  <!-- Fire up rviz -->
  <include file="$(find r2_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
    <arg name="debug" value="false"/>
  </include>


  <!-- Localization and simulation routines -->

  <!-- Spawn the ISS world.  Waits until move_group is running -->
  <!-- <node name="spawn_world" type="spawn_world" pkg="r2_planning_demos" output="screen"/> -->

  <!-- Create a robot and joint state publishers to publish variable tfs and joint states for the fake robot-->
  <node if="$(arg fake_robot)" name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/>
  <node if="$(arg fake_robot)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
     <rosparam param="source_list">["r2_joint_states"]</rosparam>
  </node>

  <!-- Launch the localization node.  Talks to RViz via R2Planning frame.  Broadcasts global robot position -->
  <node name="localizer" pkg="r2_planning_demos" type="localizer" output="screen">
    <param name="gazebo" value="$(arg gazebo)"/>
  </node>

  <!-- Launch the trajectory execution node.  Talks to RViz via R2Planning frame.  Manages trajectory execution and recovery. -->
  <node name="executor" pkg="r2_planning_demos" type="executor" output="screen">
    <param name="execute" value="$(arg execute)"/>
  </node>

</launch>